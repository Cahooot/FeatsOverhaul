// =================================== Polearm Master: Opportunity Attack ===================================
// Add tridents and javelins, correct description to include pikes (which were always included but not mentioned), and dynamically give non-Reach polearms the Reach property when they are equipped with both hands. Passive is now highlighted

new entry "PolearmMaster_AttackOfOpportunity"
type "PassiveData"
data "DisplayName" "h6b81fdc6gdc6egec70g7f25gf2cbec87fff8;1"
data "Description" "h697b2cf3g279aga146ge50ag1d967a742c8d;1"
data "Icon" "PassiveFeature_PolearmMaster_AttackOfOpportunity"
data "Boosts" "UnlockInterrupt(Interrupt_PolearmMaster)"
data "StatsFunctorContext" "OnCreate;OnEquip;OnTurn"
data "StatsFunctors" "IF(CHT_PolearmMasterCheck(context.Source) and not HasWeaponProperty(WeaponProperties.Reach, GetActiveWeapon(context.Source, true)) and Goon_IsPolearm(GetActiveWeapon(context.Source, false))):ApplyEquipmentStatus(SELF,MeleeMainHand,CHT_REACH_OVERWRITE,100,-1);IF(not CHT_PolearmMasterCheck(context.Source) and HasStatus('CHT_REACH_OVERWRITE',GetActiveWeapon(context.Source, true))):ApplyEquipmentStatus(SELF,MeleeMainHand,CHT_REACH_OVERWRITE_CLEANER,100,0)"
data "Properties" "Highlighted"

new entry "CHT_REACH_OVERWRITE"
type "StatusData"
data "StatusType" "BOOST"
data "DisplayName" "h1de91f04gcff1g43e9ga6c3ga190a0ae7422;1"
data "Icon" "PassiveFeature_PolearmMaster_AttackOfOpportunity"
data "StatusPropertyFlags" "DisableOverhead;DisablePortraitIndicator;DisableCombatlog;IgnoreResting"
data "StackId" "CHT_REACH_OVERWRITE"
data "Boosts" "WeaponProperty(Reach)"
data "RemoveEvents" "OnStatusApplied"
data "RemoveConditions" "StatusId('CHT_REACH_OVERWRITE_CLEANER')"

new entry "CHT_REACH_OVERWRITE_CLEANER"
type "StatusData"
data "StatusType" "BOOST"
data "DisplayName" "h8837537egd63ag4f39gbc62g96223a504cb7;1"
data "StatusPropertyFlags" "DisableOverhead;DisablePortraitIndicator;DisableCombatlog;IgnoreResting"

// Allow interrupt to work if disguised. Also no longer triggers if target if invisible or is under the effects of Disengage, Panache, or Fancy Footwork
new entry "Interrupt_PolearmMaster"
type "InterruptData"
using "Interrupt_PolearmMaster"
data "DisplayName" "hb66859e8gd45bg8e13g9dfbg9bfcfe2d2f53;1"
data "Description" "hd86fb36cg83fag3ae1ge0a7gf9366ff6bc89;1"
data "ExtraDescription" "h7a70afc8gb481gba1aga700g724ef7d0a458;1"
// data "Conditions" "Self(context.Source,context.Observer) and IsAbleToReact(context.Observer) and (HasWeaponProperty(WeaponProperties.Reach, GetActiveWeapon(context.Source)) or Tagged('WPN_STAVE', GetActiveWeapon(context.Source, true)) or Tagged('WPN_SPEAR', GetActiveWeapon(context.Source, true))) and Enemy() and not WieldingWeapon('Ammunition', false, false, context.Source) and not (not Player(context.Source) and Tagged('AI_IGNORED_TARGET')  and not HasStatus('GNOLL_SUDDENRUSH')) and not HasStatus('SHOCKWAVE') and not (HasStatus('MOBILE_NO_AOO', context.Source) and HasStatus('MOBILE_NO_AOO_SOURCE', context.Target)) and not HasStatus('FLAMING_SPHERE_AURA') and not HasStatus('SNEAKING',context.Target) and not HasStatus('SG_Ignore_AOO',context.Target) and not AnyEntityIsItem()"
data "Conditions" "(Player(context.Observer) or not HasStatus('SG_Invisible',context.Observer)) and Self(context.Source,context.Observer) and IsAbleToReact(context.Observer) and (HasWeaponProperty(WeaponProperties.Reach, GetActiveWeapon(context.Source)) or Goon_IsPolearm(GetActiveWeapon(context.Source, false))) and Enemy() and not WieldingWeapon('Ammunition', false, false, context.Source) and not (not Player(context.Source) and Tagged('AI_IGNORED_TARGET')  and not HasStatus('GNOLL_SUDDENRUSH')) and not HasStatus('SHOCKWAVE') and not (HasStatus('MOBILE_NO_AOO', context.Source) and HasStatus('MOBILE_NO_AOO_SOURCE', context.Target)) and not HasStatus('FLAMING_SPHERE_AURA') and not HasStatus('SNEAKING',context.Target) and not HasStatus('SG_Ignore_AOO',context.Target) and not AnyEntityIsItem() and not HasSpellFlag(SpellFlags.IgnoreAoO, context.Target) and not (HasStatus('FANCYFOOTWORK', context.Source,context.Target) and HasStatus('FANCYFOOTWORK_OWNER', context.Target)) and not (HasStatus('PANACHE', context.Source) and HasStatus('PANACHE_OWNER', context.Target)) and not HasStatus('DISENGAGE', context.Target) and not HasStatus('SG_Invisible', context.Target)"
// data "EnableCondition" "not HasAnyStatus({'SG_Polymorph','SG_Blinded'}) or HasAnyStatus({'SG_Disguise','WILDSHAPE_STARRY_ARCHER_PLAYER','WILDSHAPE_STARRY_CHALICE_PLAYER','WILDSHAPE_STARRY_DRAGON_PLAYER'});"
data "EnableCondition" "(not HasStatus('SG_Polymorph') or Goon_IsUnrestrictedPolymorphStatus()) and not HasStatus('SG_Blinded')"

// =================================== Polearm Master: Bonus Attack ===================================
// Also add tridents and javelins, and include pikes in description. Passive is now highlighted

new entry "PolearmMaster_BonusAttack"
type "PassiveData"
data "DisplayName" "h373122d1g38ceg802ag719egbfa84a2cb266;1"
data "Description" "h86eac956g2d43g4d6fg23cbg701bb67a7e8d;1"
data "DescriptionParams" "DealDamage(1d4+max(DexterityModifier,StrengthModifier), Bludgeoning)"
data "Icon" "Action_PolearmMaster_BonusAttack"
data "Properties" "OncePerTurn;Highlighted"
data "StatsFunctorContext" "OnAttack"
data "Conditions" "TurnBased() and ConditionResult(context.HitDescription.FirstAttack) and IsMeleeWeaponAttack() and (HasWeaponProperty(WeaponProperties.Reach, GetAttackWeapon(context.Source)) or Tagged('WPN_STAVE', GetAttackWeapon(context.Source)) or Tagged('WPN_TRIDENT', GetActiveWeapon(context.Source, true)) or Tagged('WPN_SPEAR', GetAttackWeapon(context.Source))  or Tagged('WPN_JAVELIN', GetActiveWeapon(context.Source, true)))"
data "StatsFunctors" "ApplyStatus(SELF, POLEARM_MASTER_BONUS_ATTACK, 100, 1)"

// Highlight the icon for the bonus attack spell when it becomes available
new entry "POLEARM_MASTER_BONUS_ATTACK"
type "StatusData"
data "StatusType" "BOOST"
using "POLEARM_MASTER_BONUS_ATTACK"
// data "Boosts" "UnlockSpell(Target_PolearmMaster_BonusAttack)"
data "Boosts" "UnlockSpell(Target_PolearmMaster_BonusAttack);UnlockSpellVariant(SpellId('Target_PolearmMaster_BonusAttack'),ModifyIconGlow())"

// Make damage riders work with the bonus attack and have the damage also change to using your spellcasting ability modifier if you have a spellcasting ability override status on your weapon
// TODO: figure out why the HEXBLADE_BIND status isn't working in either of Goon's khn checks (Goon_IsSpellcastingModifierWeapon and Goon_IsCharismaModifierWeapon) nor in the vanilla status check used for this spell
new entry "Target_PolearmMaster_BonusAttack"
type "SpellData"
data "SpellType" "Target"
using "Target_PolearmMaster_BonusAttack"
// data "RequirementConditions" "(HasWeaponProperty(WeaponProperties.Reach, GetActiveWeapon(context.Source)) or Tagged('WPN_STAVE', GetActiveWeapon(context.Source, true)) or Tagged('WPN_SPEAR', GetActiveWeapon(context.Source, true))) "
data "RequirementConditions" "(HasWeaponProperty(WeaponProperties.Reach, GetActiveWeapon(context.Source)) or Tagged('WPN_STAVE', GetActiveWeapon(context.Source, true)) or Tagged('WPN_TRIDENT', GetActiveWeapon(context.Source, true)) or Tagged('WPN_SPEAR', GetActiveWeapon(context.Source, true)) or Tagged('WPN_JAVELIN', GetActiveWeapon(context.Source, true)))"
// data "SpellSuccess" "IF(HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE'}, GetAttackWeapon())):DealDamage(1d4+max(DexterityModifier,StrengthModifier), Bludgeoning,,,0,,,,,,MainMeleeWeapon);IF(HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE'}, {}, {}, GetAttackWeapon())):DealDamage(1d4+CharismaModifier, Bludgeoning,,,0,,,,,,MainMeleeWeapon);"
// data "SpellSuccess" "IF(not (Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) or Goon_IsIntelligenceModifierWeapon(GetAttackWeapon(context.Source)) or Goon_IsWisdomModifierWeapon(GetAttackWeapon(context.Source)) or Goon_IsCharismaModifierWeapon(GetAttackWeapon(context.Source)))):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), Bludgeoning);IF(Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source))):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), Bludgeoning);IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsIntelligenceModifierWeapon(GetAttackWeapon(context.Source))):DealDamage(ImprovisedWeapon+IntelligenceModifier, Bludgeoning);IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsWisdomModifierWeapon(GetAttackWeapon(context.Source))):DealDamage(ImprovisedWeapon+WisdomModifier, Bludgeoning);IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsCharismaModifierWeapon(GetAttackWeapon(context.Source))):DealDamage(ImprovisedWeapon+CharismaModifier, Bludgeoning);ExecuteWeaponFunctors(MainHand)"
data "SpellSuccess" "IF(not (Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) or Goon_IsWisdomModifierWeapon(GetAttackWeapon(context.Source)) or Goon_IsCharismaModifierWeapon(GetAttackWeapon(context.Source)))):DealDamage(ImprovisedWeapon+max(DexterityModifier,StrengthModifier), Bludgeoning);IF(Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source))):DealDamage(ImprovisedWeapon+max(IntelligenceModifier, WisdomModifier, CharismaModifier), Bludgeoning);IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsWisdomModifierWeapon(GetAttackWeapon(context.Source))):DealDamage(ImprovisedWeapon+WisdomModifier, Bludgeoning);IF(not Goon_IsSpellcastingModifierWeapon(GetAttackWeapon(context.Source)) and Goon_IsCharismaModifierWeapon(GetAttackWeapon(context.Source))):DealDamage(ImprovisedWeapon+CharismaModifier, Bludgeoning);ExecuteWeaponFunctors(MainHand)"
data "DisplayName" "hcd723e04gc2fage95ag8f7fg103cea0319e5;1"
data "Description" "h2cdd9089gf05ag635bgf7c9g903c96bd869f;1"
// data "DescriptionParams" "DealDamage(1d4+max(DexterityModifier,StrengthModifier), Bludgeoning)"
data "DescriptionParams" "DealDamage(1d4+max(DexterityModifier,StrengthModifier), Bludgeoning)"
// data "TooltipDamageList" "DealDamage(1d4+max(DexterityModifier,StrengthModifier), Bludgeoning)"
data "TooltipDamageList" "DealDamage(1d4+max(DexterityModifier,StrengthModifier), Bludgeoning)"

// Below is what was changed to Target_PolearmMaster_BonusAttack in hotfix 30, but keeping using DealDamage(ImprovisedWeapon,...) instead of using the new DealDamage() parameter for backwards compatibility
// data "SpellSuccess" "IF(HasAnyStatus({}, {}, {'HEXBLADE_BIND', 'PACT_BLADE'}, GetAttackWeapon())):DealDamage(1d4+max(DexterityModifier,StrengthModifier), Bludgeoning,,,0,,,,,,MainMeleeWeapon);IF(HasAnyStatus({'HEXBLADE_BIND', 'PACT_BLADE'}, {}, {}, GetAttackWeapon())):DealDamage(1d4+CharismaModifier, Bludgeoning,,,0,,,,,,MainMeleeWeapon);"